Git:
--> Content tracker
--> Distributed version Control system 
git init --> initiliaze the repository
git add . --> moving files from working area to Staging area (files are ready to commit in local repository)
git restore <filename> -- will revert the changes to previous change from current change
Best practice --> Keep your commit atomic and name your commit with meaningful message what exactly it does. Atomic means we shouldnt add multiple changes in one commit, we should create a commit for each changes (git add story1.txt)
>git restor --staged <filename> --> it will remove the file from staging area
>git rm --cached <filename> --> if you want remove the files(personal notes) from staging during file tracking
> echo "file.name" > .gitignore --> it will skip the file from tracking
Git branches:
>git branche --> shows all the branch
> git branch <branchname> --> create new branch
> git checkout <branchname> --> switch to other branch 
> git checkout -n <bn> --> create new branch and switch
> git branch -d < bn> --> delete the branch 
Merge
Fastforward Merge --> the current branch has no extra commits to the branch that we are merging --> it will not create a commit while merging
No fastforward merge --> it happens when we have more commits on current branch to merge with other merge, --> it will create a new commit
Git Remote repository:
>git remote add origin <url> --> to alias a remote repository and we can use this command to make connection between local and remote repository
> git fetch origin master --> pull the changes from remote repository master branch
> git fork <url> --> it will create the copy of repository and do a changes, than raise a pull request to main repository

GIT Commands : https://www.geeksforgeeks.org/git-cheat-sheet/

What is Git Stash? Why Use It?
Sometimes you need to quickly switch tasks or fix a bug, but you're not ready to commit your work.

git stash lets you save your uncommitted changes and return to a clean working directory.

You can come back and restore your changes later.

Here are some common use cases:

Switch branches safely: Save your work before changing branches.
Handle emergencies: Stash your work to fix something urgent, then restore it.
Keep your work-in-progress safe: Avoid messy commits or losing changes.

Git Rebase is a command used to move or combine a sequence of commits to a new base commit. It helps you put your changes on top of a different commit, making the history cleaner and more straightforward without creating merge commits. Unlike git merge, which combines branches and adds a merge commit, rebase rewrites history by applying your changes directly to the target branch (usually master or main). This keeps the history neat and easier to understand.

Syntax:

git checkout <feature-branch>
git rebase <base-branch>
In this syntax:

<feature-branch> is the branch with the changes you want to rebase.
<base-branch> is the branch you want to rebase your changes onto, typically main or master.

Difference between Git Fetch and Git Pull
Git Fetch VS Git Pull

Used to fetch all changes from the remote repository to the local repository without merging into the current working directory VS	Brings the copy of all the changes from a remote repository and merges them into the current working directory
Repository data is updated in the .git directory VS	The working directory is updated directly
Review of commits and changes can be done VS	Updates the changes to the local repository immediately.
No possibility of merge conflicts.	VS Merge conflicts are possible if the remote and the local repositories have done changes at the same place.
Command for Git fetch is git fetch<remote> VS	Command for Git Pull is git pull<remote><branch>
Git fetch basically imports the commits to local branches so as to keep up-to-date that what everybody is working on.	VS Git Pull basically brings the local branch up-to-date with the remote copy that will also updates the other remote tracking branches.
















































name: Maven CI-CD

on:
 push:
    branches:
      - main
      - release
      - develop
      - feature
    paths-ignore:
      - 'database/oracle/schema/adhoc_sql/*'
      - 'database/oracle/schema/package/*'
      - '.github/workflows/DBCR.yml'
      - 'src/config/*'
      - '.github/workflows/Config.yml'

 
jobs:
  build:

    runs-on: [self-hosted,linux]
    permissions: 
      contents: read
      packages: write 
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

    - name: Configure settings.xml
      shell: bash
      run: |
          mkdir -p ~/.m2 \
          && cat << EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
         
          <servers>
          <server>
          <id>maven-default-http-blocker</id>
          <username>username</username>
          <password>password</password>
          </server>
          <server>
          <id>github</id>
          <username>username</username>
          <password>password</password>
          </server>
          </servers>
          <mirrors>
          <mirror>
          <id>maven-default-http-blocker</id>
          <mirrorOf>external:http:*</mirrorOf>
          <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
          <url>URL/</url>
          <blocked>false</blocked>
          </mirror>
          </mirrors>
                    
          <profiles>
          <profile>
          <id>maven-default-http-blocker</id>
          <repositories>
          <repository>
          <id>libs-release</id>
          <url>URL/</url>
          </repository>
          </repositories>
          </profile>
          
          <profile>
          <id>github</id>
          <repositories>
          <repository>
          <id>github</id>
          <url>URL</url>
          <snapshots>
          <enabled>true</enabled>
          </snapshots>
          </repository>
          </repositories>
          </profile>
          </profiles>
          
          <activeProfiles>
          <activeProfile>maven-default-http-blocker</activeProfile>
          <activeProfile>github</activeProfile>
          </activeProfiles>
          </settings>
          EOF
    - name: Set up Toolchain
      shell: bash
      run: |
          mkdir -p $HOME/.m2 \
          && cat << EOF > $HOME/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>11</version>
                  <vendor>openjdk</vendor>
                </provides>
                <configuration>
                  <jdkHome>/github/actions-runner/_work/_tool/Java_Temurin-Hotspot_jdk/11.0.17-8/x64</jdkHome>
                </configuration>
            </toolchain>
          </toolchains>
          EOF
        
    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.3
      with:
        maven-version: '3.8.1'
    
    - name: Build with Maven
      run: |
        rm -rf ~/.m2/repository
        mvn clean install -DskipTests -U -X
    - name: Publish package
      run: mvn deploy -DskipTests -X

  Deploy:

     runs-on: [self-hosted,linux]
     needs: [build]
     permissions: 
       contents: read
       packages: write 
     steps:

       - name: copy files to DEV server
         if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
         run: |
            echo "Undeploy"
            curl -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/undeploy?path=/cmentws
            sleep 15s
            echo "Deploy new war"
            curl --upload-file /github/actions-runner/_work/cment-ws/cment-ws/target/cmentws.war -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/deploy?path=/cmentws
            sleep 10s
            echo "Reload"
            curl -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/reload?path=/cmentws
            sleep 5s

