Git:
--> Content tracker
--> Distributed version Control system 
git init --> initiliaze the repository
git add . --> moving files from working area to Staging area (files are ready to commit in local repository)
git restore <filename> -- will revert the changes to previous change from current change
Best practice --> Keep your commit atomic and name your commit with meaningful message what exactly it does. Atomic means we shouldnt add multiple changes in one commit, we should create a commit for each changes (git add story1.txt)
>git restor --staged <filename> --> it will remove the file from staging area
>git rm --cached <filename> --> if you want remove the files(personal notes) from staging during file tracking
> echo "file.name" > .gitignore --> it will skip the file from tracking
Git branches:
>git branche --> shows all the branch
> git branch <branchname> --> create new branch
> git checkout <branchname> --> switch to other branch 
> git checkout -n <bn> --> create new branch and switch
> git branch -d < bn> --> delete the branch 
Merge
Fastforward Merge --> the current branch has no extra commits to the branch that we are merging --> it will not create a commit while merging
No fastforward merge --> it happens when we have more commits on current branch to merge with other merge, --> it will create a new commit




















































name: Maven CI-CD

on:
 push:
    branches:
      - main
      - release
      - develop
      - feature
    paths-ignore:
      - 'database/oracle/schema/adhoc_sql/*'
      - 'database/oracle/schema/package/*'
      - '.github/workflows/DBCR.yml'
      - 'src/config/*'
      - '.github/workflows/Config.yml'

 
jobs:
  build:

    runs-on: [self-hosted,linux]
    permissions: 
      contents: read
      packages: write 
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

    - name: Configure settings.xml
      shell: bash
      run: |
          mkdir -p ~/.m2 \
          && cat << EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
         
          <servers>
          <server>
          <id>maven-default-http-blocker</id>
          <username>username</username>
          <password>password</password>
          </server>
          <server>
          <id>github</id>
          <username>username</username>
          <password>password</password>
          </server>
          </servers>
          <mirrors>
          <mirror>
          <id>maven-default-http-blocker</id>
          <mirrorOf>external:http:*</mirrorOf>
          <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
          <url>URL/</url>
          <blocked>false</blocked>
          </mirror>
          </mirrors>
                    
          <profiles>
          <profile>
          <id>maven-default-http-blocker</id>
          <repositories>
          <repository>
          <id>libs-release</id>
          <url>URL/</url>
          </repository>
          </repositories>
          </profile>
          
          <profile>
          <id>github</id>
          <repositories>
          <repository>
          <id>github</id>
          <url>URL</url>
          <snapshots>
          <enabled>true</enabled>
          </snapshots>
          </repository>
          </repositories>
          </profile>
          </profiles>
          
          <activeProfiles>
          <activeProfile>maven-default-http-blocker</activeProfile>
          <activeProfile>github</activeProfile>
          </activeProfiles>
          </settings>
          EOF
    - name: Set up Toolchain
      shell: bash
      run: |
          mkdir -p $HOME/.m2 \
          && cat << EOF > $HOME/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>11</version>
                  <vendor>openjdk</vendor>
                </provides>
                <configuration>
                  <jdkHome>/github/actions-runner/_work/_tool/Java_Temurin-Hotspot_jdk/11.0.17-8/x64</jdkHome>
                </configuration>
            </toolchain>
          </toolchains>
          EOF
        
    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.3
      with:
        maven-version: '3.8.1'
    
    - name: Build with Maven
      run: |
        rm -rf ~/.m2/repository
        mvn clean install -DskipTests -U -X
    - name: Publish package
      run: mvn deploy -DskipTests -X

  Deploy:

     runs-on: [self-hosted,linux]
     needs: [build]
     permissions: 
       contents: read
       packages: write 
     steps:

       - name: copy files to DEV server
         if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
         run: |
            echo "Undeploy"
            curl -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/undeploy?path=/cmentws
            sleep 15s
            echo "Deploy new war"
            curl --upload-file /github/actions-runner/_work/cment-ws/cment-ws/target/cmentws.war -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/deploy?path=/cmentws
            sleep 10s
            echo "Reload"
            curl -H 'Authorization: Basic c3ZjbgsfhgjgfGJHHkhknkdgnnb==' http://host:8080/manager/text/reload?path=/cmentws
            sleep 5s

